Verificar se todas as rotas e tabelas (products, movements, compartments, profiles) est√£o 100% usando Supabase.

Corrigir automaticamente qualquer rota que ainda use MemStorage ou tabelas antigas (produtos, movimentos, usuarios).

Criar 5 produtos fict√≠cios no Supabase.

Alocar cada produto em um compartimento distinto (1A1, 2A1, 3A1, 4A1, 5A1) convertendo para UUID do compartments.

Registrar movimenta√ß√µes: entrada de 100 unidades + sa√≠da de 30 unidades em cada produto.

Consultar saldos finais diretamente da tabela movements.

Gerar relat√≥rio consolidado (esperado = 70 unidades por produto).

Detectar inconsist√™ncias (ex.: bigint vs UUID, colunas ausentes, RLS bloqueando) e corrigir automaticamente antes de prosseguir.

Rodar novamente at√© confirmar que tudo est√° consistente.

üìã Prompt para colar no Replit
Quero que executes um **teste automatizado completo e de corre√ß√£o** da integra√ß√£o com o Supabase.  

üîç OBJETIVO: Garantir que toda a aplica√ß√£o (rotas, storage e tabelas) use exclusivamente o Supabase com persist√™ncia real.  

### ETAPAS DO TESTE:

1. **Verifica√ß√£o de schema**
   - Verifica as tabelas `products`, `movements`, `compartments` e `profiles` no schema `public`.
   - Confirma que todas usam `UUID` como chave prim√°ria.
   - Se encontrar tabelas antigas (`produtos`, `movimentos`, `usuarios`) ou rotas ainda usando MemStorage, corrige imediatamente para usar apenas as tabelas novas.

2. **Cria√ß√£o de produtos**
   - Cria 5 produtos fict√≠cios no Supabase (`Produto Auto 1` ... `Produto Auto 5`).
   - Cada produto deve ser criado em `products` com c√≥digo √∫nico.

3. **Mapeamento de compartimentos**
   - Converte automaticamente os endere√ßos `"1A1"`, `"2A1"`, `"3A1"`, `"4A1"`, `"5A1"` para seus respectivos UUIDs em `compartments`.

4. **Movimenta√ß√µes**
   - Para cada produto:
     - Registra **entrada de 100 unidades**.
     - Registra **sa√≠da de 30 unidades**.
   - Usa `movements` com os campos corretos (`product_id`, `compartment_id`, `user_id`, `qty`, `type`).

5. **Consulta de saldos**
   - Consulta a tabela `movements` para cada produto.
   - Calcula o saldo final esperado = `70`.
   - Se houver erro de schema (ex.: bigint vs UUID), corrige automaticamente e repete a opera√ß√£o.

6. **Relat√≥rio consolidado**
   - Exibe tabela final com:  
     Produto | Compartimento | Entrada | Sa√≠da | Saldo Esperado | Saldo Real | Status  
   - Marca ‚úÖ se saldo = 70, ‚ùå se houver diverg√™ncia.

7. **Corre√ß√µes autom√°ticas**
   - Se detectar:
     - Rotas usando MemStorage ‚Üí Corrigir para SupabaseStorage.
     - Conflitos de schema ‚Üí Corrigir para usar `public.products` e `public.movements`.
     - Erros de tipos (`bigint` vs `UUID`) ‚Üí Ajustar colunas e queries.
     - RLS bloqueando ‚Üí Usar `SUPABASE_SERVICE_ROLE_KEY` automaticamente.
   - Ap√≥s corrigir, repetir todo o fluxo at√© os resultados baterem.

---

üéØ **Condi√ß√£o de sucesso:**  
Todos os 5 produtos aparecem no Supabase, cada um alocado no compartimento correto, com saldo final = 70.  
Gerar relat√≥rio final comprovando consist√™ncia total do sistema.